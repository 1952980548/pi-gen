#!/bin/bash -e

log (){
	date +"[%T|$STAGE] $*" | tee -a "${LOG_FILE}"
}
export -f log

bootstrap(){
	local ARCH
	ARCH=$(dpkg --print-architecture)

	export http_proxy=${APT_PROXY}

	if [ "$ARCH" !=  "armhf" ]; then
		local BOOTSTRAP_CMD=qemu-debootstrap
	else
		local BOOTSTRAP_CMD=debootstrap
	fi

	capsh --drop=cap_setfcap -- "${BOOTSTRAP_CMD}" --components=main,contrib,non-free \
		--arch armhf \
		--keyring "${STAGE_DIR}/files/raspberrypi.gpg" \
		"$1" "$2" "$3" || true
	if [ -d "$2/debootstrap" ]; then
		rmdir "$2/debootstrap"
	fi
}
export -f bootstrap

copy_previous(){
	if [ ! -d "${PREV_ROOTFS_DIR}" ]; then
		echo "Previous stage rootfs not found"
		false
	fi
	mkdir -p "${ROOTFS_DIR}"
	rsync -aHAXx --exclude var/cache/apt/archives "${PREV_ROOTFS_DIR}/" "${ROOTFS_DIR}/"
}
export -f copy_previous

unmount(){
	if [ -z "$1" ]; then
		DIR=$PWD
	else
		DIR=$1
	fi

	while mount | grep -q "$DIR"; do
		local LOCS
		LOCS=$(mount | grep "$DIR" | cut -f 3 -d ' ' | sort -r)
		for loc in $LOCS; do
			umount "$loc"
		done
	done
}
export -f unmount

unmount_image(){
	sync
	sleep 1
	local LOOP_DEVICES
	LOOP_DEVICES=$(losetup -j "${1}" | cut -f1 -d':')
	for LOOP_DEV in ${LOOP_DEVICES}; do
		if [ -n "${LOOP_DEV}" ]; then
			local MOUNTED_DIR
			MOUNTED_DIR=$(mount | grep "$(basename "${LOOP_DEV}")" | head -n 1 | cut -f 3 -d ' ')
			if [ -n "${MOUNTED_DIR}" ] && [ "${MOUNTED_DIR}" != "/" ]; then
				unmount "$(dirname "${MOUNTED_DIR}")"
			fi
			sleep 1
			losetup -d "${LOOP_DEV}"
		fi
	done
}
export -f unmount_image

on_chroot() {
	if [[ -d "${1}/rootfs" || -z "${ROOTFS_DIR}" && -d "./rootfs" ]]; then
		ROOTFS_DIR="${1:-.}/rootfs"
		[[ -n "${1}" ]] && shift
	fi
	if [[ ! -d "${ROOTFS_DIR}" ]]; then 
		echo "Cannot chroot to '${ROOTFS_DIR}', it is not a directory." 1>&2
		return -1
	fi
	if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/proc)"; then
		mount -t proc proc "${ROOTFS_DIR}/proc"
	fi
	for DIR in dev dev/pts sys; do 
		if ! mount | grep -q "$(realpath "${ROOTFS_DIR}/${DIR}")"; then
			mount --bind /${DIR} "${ROOTFS_DIR}/${DIR}"
		fi
	done

	local BASEDIR="$(dirname "${ROOTFS_DIR}")"
	local CHROOT_NAME="${IMG_NAME:-pi-gen}:${STAGE:-${BASEDIR##*/}}"

	debian_chroot="${CHROOT_NAME}" capsh --drop=cap_setfcap "--chroot=${ROOTFS_DIR}/" -- # -e "$@"
}
export -f on_chroot

update_issue() {
	local GIT_HASH
	GIT_HASH=$(git rev-parse HEAD)
	echo -e "Raspberry Pi reference ${IMG_DATE}\nGenerated using pi-gen, https://github.com/RPi-Distro/pi-gen, ${GIT_HASH}, ${1}" > "${ROOTFS_DIR}/etc/rpi-issue"
}
export -f update_issue

